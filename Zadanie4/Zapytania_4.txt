1)
PIPELINE:
	weightConversion = {
		$addFields: {
			convertedWeight: {
				$convert: {input: "$weight", to: "double"}
			}
		}
	};
	heightConvertion = {
		$addFields: {
			convertedHeight: {
				$convert: {input: "$height", to: "double"}
			}
		}
	};
	avgWeightAndHeightBySex = {
		$group: {
			"_id": "$sex",
			"avgWeight": {$avg: "$convertedWeight"},
			"avgHeight": {$avg: "$convertedHeight"}
		}
	};
	db.people.aggregate([
		weightConversion,
		heightConvertion,
		avgWeightAndHeightBySex
	]).toArray()

MAP-REDUCE:
	var mapFunction = function() {
		
		var convertedWeight = parseFloat(this.weight);
		var convertedHeight = parseFloat(this.height);
		
		var key = {
			sex: this.sex
		};
	
		var values = {
			weight: convertedWeight,
			height: convertedHeight,
			count: 1
		};
	
		emit(key, values);
	};
	var reduceFunction = function(key, values) {
	
		var reducedValue = {
			weight: 0,
			height: 0,
			count: 0
		};
	
		values.forEach(function(item) {
			reducedValue.weight += item.weight;
			reducedValue.height += item.height;
			reducedValue.count += 1;
		});
	
		return reducedValue;
	};
	var finalizeFunction = function(key, reducedValue) {
		
		var avgWeight = reducedValue.weight / reducedValue.count;
		var avgHeight = reducedValue.height / reducedValue.count;
		
		var modifiedObject = {
			avgWeight: avgWeight,
			avgHeight: avgHeight
		};
		
		return modifiedObject;
	};
	db.people.mapReduce(
		mapFunction,
		reduceFunction,
		{
			out: {inline: 1},
			finalize: finalizeFunction
		}
	)


2)
PIPELINE:
	balanceConversion = {
		$addFields: {
			"credit.convertedBalance": {
				$convert: {input: "$credit.balance", to: "double"}
			}
		}
	};
	sumOfBalanceByCurrency = {
		$group: {
			"_id": "$credit.currency",
			"balanceSum": {$sum: "$credit.convertedBalance"}
		}
	};
	db.people.aggregate([
		{$unwind: "$credit"},
		balanceConversion,
		sumOfBalanceByCurrency
	]).toArray()




==== do konwertowania warotści w tablicach ====
balanceConversion = {
		$addFields: {
			"convertedCredit": {
				$map: {
					input: "$credit",
					in: {
						"currency": "$$this.currency",
						"balance": {
							$convert: {input: "$$this.balance", to: "double"}
						}
					}
				}
			}
		}
	};

MAP-REDUCE:
	var mapFunction = function() {
		this.credit.forEach(function(item) {
			var key = item.currency;
			var value = parseFloat(item.balance);
		
			emit(key, value);
		});
	};
	var reduceFunction = function(key, values) {
		var reducedValue = Array.sum(values);
		
		return reducedValue;
	};
	db.people.mapReduce(
		mapFunction,
		reduceFunction,
		{
			out: {inline: 1}
		}
	)
	

3)	????? (pytanie czy chodzi o listę zawierającą wszystkie zawody bez powtórzeń, czy listę zawierającą zawody w którym pracuje tylko jedna osoba z całej bazy)
PIPELINE: 
	db.people.aggregate([
		{
			$group: {
				"_id": "$job"
			}
		}
	])

MAP-REDUCE:
	var mapFunction = function() {
		emit(this.job, null);
	};
	var reduceFunction = function(key, values) {
		var reducedValue = null;
		
		return reducedValue;
	};
	db.people.mapReduce(
		mapFunction,
		reduceFunction,
		{
			out: {inline: 1}
		}
	)


4)
PIPELINE:
	weightConversion = {
		$addFields: {
			convertedWeight: {
				$convert: {input: "$weight", to: "double"}
			}
		}
	};
	heightConvertion = {
		$addFields: {
			convertedHeight: {
				$convert: {input: "$height", to: "double"}
			}
		}
	};
	bmiCalculation = {
		$addFields: {
			bmi: {
				$divide: ["$convertedWeight", {$pow: [{$divide: ["$convertedHeight", 100]}, 2]}]
			}
		}
	};
	avgMinMaxBmiByMationality = {
		$group: {
			"_id": "$nationality",
			avgBmi: {$avg: "$bmi"},
			minBmi: {$min: "$bmi"},
			maxBmi: {$max: "$bmi"}
		}
	}
	db.people.aggregate([
		weightConversion,
		heightConvertion,
		bmiCalculation,
		avgMinMaxBmiByMationality
	]).toArray()

MAP-REDUCE:
	var mapFunction = function() {
		
	};
	var reduceFunction = function(key, values) {
		
		
		return reducedValue;
	};
	var finalizeFunction = function(key, reducedValue) {
		
		return modifiedValue;
	};
	db.people.mapReduce(
		mapFunction,
		reduceFunction,
		{
			out: {inline: 1},
			finalize: finalizeFunction
		}
	)

5)
PIPELINE:
	balanceConversion = {
		$addFields: {
			"credit.convertedBalance": {
				$convert: {input: "$credit.balance", to: "double"}
			}
		}
	};
	sexAndNationalitySelection = {
		$match: {
			"sex": "Female",
			"nationality": "Poland"
		}
	};
	avgAndSumOfBalanceByCurrency = {
		$group: {
			"_id": "$credit.currency",
			"balanceAvg": {$avg: "$credit.convertedBalance"},
			"balanceSum": {$sum: "$credit.convertedBalance"}
		}
	};
	db.people.aggregate([
		{$unwind: "$credit"},
		balanceConversion,
		sexAndNationalitySelection,
		avgAndSumOfBalanceByCurrency
	]).toArray()


MAP-REDUCE:
	var mapFunction = function() {
		
	};
	var reduceFunction = function(key, values) {
		
		
		return reducedValue;
	};
	var finalizeFunction = function(key, reducedValue) {
		
		return modifiedValue;
	};
	db.people.mapReduce(
		mapFunction,
		reduceFunction,
		{
			out: {inline: 1},
			finalize: finalizeFunction
		}
	)


